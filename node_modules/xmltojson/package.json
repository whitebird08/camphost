{
  "name": "xmltojson",
  "version": "1.1.0",
  "author": {
    "name": "William Summers",
    "email": "william.summers@metatribal.com"
  },
  "description": "Configurable, lightweight XML to JSON converter.",
  "license": {
    "type": "Apache",
    "url": "https://github.com/metatribal/xmlToJSON/blob/master/LICENSE"
  },
  "contributors": [
    {
      "name": "William Summers",
      "email": "william.summers@metatribal.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/metatribal/xmlToJSON.git"
  },
  "keywords": [
    "xml",
    "json",
    "convert",
    "transform"
  ],
  "main": "./lib/xmltojson",
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": "*"
  },
  "readme": "xmlToJSON\n=========\n\nA simple javascript module for converting XML into JSON.\n\nFeatures\n* no external dependencies\n* small (~3kb minified)\n* simple parsing.  pass either a string or xml node and get back a javascipt object ( use JSON.stringify(obj) to get the string representation )\n* supports atrributes, text, cdata, namespaces, default namespaces, attributes with namespaces... you get the idea\n* lots of rendering of options\n* browser support - it works on IE 7+, and nearly every version of Chrome, Safari, and Firefox as well as iOS, Android, and Blackberry\n\nParsing XML (esp. with namespaces) with javascript remains one of the great frustrations of writing web applications.\nMost methods are limited by such things as poor browser support, poor or non-existent namespace support, poor attribute handling, incomplete representation, and bloated dependencies.\n\nxmlToJSON may not solve all of your woes, but it solved mine :)\n\nUsage\n-----\nInclude the src\n```\n<script type=\"text/javascript\" src=\"path/xmlToJSON.js\"></script>\n ```\nand enjoy!  xmlToJSON is packaged as a simple module, so use it like this\n ```javascript\n  testString = '<xml><a>It Works!</a></xml>';  \t// get some xml (string or document/node)\n  result = xmlToJSON.parseString(testString);\t// parse\n ```\n The (prettified) result of the above code is\n ```javascript\n{\n    \"xml\": {\n        \"a\": [\n            {\n                \"text\": \"It Works!\"\n            }\n        ]\n    }\n}\n```\n\nOptions\n-------\n```javascript\n// These are the option defaults\nvar options = { \n\tmergeCDATA: true,\t// extract cdata and merge with text nodes\n\tgrokAttr: true,\t\t// convert truthy attributes to boolean, etc\n\tgrokText: true,\t\t// convert truthy text/attr to boolean, etc\n\tnormalize: true,\t// collapse multiple spaces to single space\n\txmlns: true, \t\t// include namespaces as attributes in output\n\tnamespaceKey: '_ns', \t// tag name for namespace objects\n\ttextKey: '_text', \t// tag name for text nodes\n\tvalueKey: '_value', \t// tag name for attribute values\n\tattrKey: '_attr', \t// tag for attr groups\n\tcdataKey: '_cdata'\t// tag for cdata nodes (ignored if mergeCDATA is true)\n\tattrsAsObject: true, \t// if false, key is used as prefix to name, set prefix to '' to merge children and attrs.\n\tstripAttrPrefix: true, \t// remove namespace prefixes from attributes\n\tstripElemPrefix: true, \t// for elements of same name in diff namespaces, you can enable namespaces and access the nskey property\n\tchildrenAsArray: true \t// force children into arrays\n};\t\n\n// you can change the defaults by passing the parser an options object of your own\nvar myOptions - {\n\tmergeCDATA: false,\n\txmlns: false,\n\tattrsAsObject: false\n}\n\nresult = xmlToJSON.parseString(xmlString, myOptions);\n```\n\nA more complicated example (with xmlns: true)\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xml xmlns=\"http://default.namespace.uri\">\n    <a>\n        <b id=\"1\">one</b>\n        <b id=\"2\"><![CDATA[some <cdata>]]>two</b>\n        <ns:c xmlns:ns=\"http://another.namespace\" ns:id=\"3\">three</ns:c>\n    </a>\n</xml>\n```\n\nresults in\n```javascript\n{\n        \"xml\": [{\n                \"attr\": {\n                        \"xmlns\": {\n                                \"value\": \"http://default.namespace.uri\"\n                        }\n                },\n                \"a\": [{\n                        \"b\": [{\n                                \"attr\": {\n                                        \"id\": {\n                                                \"value\": 1\n                                        }\n                                },\n                                \"text\": \"one\"\n                        }, {\n                                \"attr\": {\n                                        \"id\": {\n                                                \"value\": 2\n                                        }\n                                },\n                                \"text\": \"some <cdata>two\"\n                        }],\n                        \"c\": [{\n                                \"attr\": {\n                                        \"xmlns:ns\": {\n                                                \"value\": \"http://another.namespace\"\n                                        },\n                                        \"id\": {\n                                                \"value\": 3\n                                        }\n                                },\n                                \"text\": \"three\"\n                        }]\n                }]\n        }]\n}\n```\n \n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/metatribal/xmlToJSON/issues"
  },
  "_id": "xmltojson@1.1.0",
  "dist": {
    "shasum": "0a6a5ebe69f4dac6b3d760224cf72beb0ed6edf3",
    "tarball": "http://registry.npmjs.org/xmltojson/-/xmltojson-1.1.0.tgz"
  },
  "_from": "xmltojson@*",
  "_npmVersion": "1.2.32",
  "_npmUser": {
    "name": "metatribal",
    "email": "william.summers@metatribal.com"
  },
  "maintainers": [
    {
      "name": "metatribal",
      "email": "william.summers@metatribal.com"
    }
  ],
  "_shasum": "0a6a5ebe69f4dac6b3d760224cf72beb0ed6edf3",
  "_resolved": "https://registry.npmjs.org/xmltojson/-/xmltojson-1.1.0.tgz"
}
